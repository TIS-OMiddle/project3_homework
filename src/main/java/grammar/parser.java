
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package grammar;

import java_cup.runtime.*;
import java.util.*;
import exceptions.*;
import flowchart.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\012\000\002\002\004\000\002\031" +
    "\004\000\002\031\002\000\002\003\006\000\002\005\004" +
    "\000\002\005\002\000\002\010\007\000\002\010\002\000" +
    "\002\006\004\000\002\006\002\000\002\011\007\000\002" +
    "\011\002\000\002\007\004\000\002\007\002\000\002\012" +
    "\007\000\002\012\002\000\002\020\003\000\002\020\005" +
    "\000\002\004\002\000\002\004\007\000\002\042\005\000" +
    "\002\033\006\000\002\032\004\000\002\032\002\000\002" +
    "\024\002\000\002\024\004\000\002\024\005\000\002\025" +
    "\010\000\002\025\006\000\002\016\003\000\002\016\002" +
    "\000\002\017\003\000\002\017\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\022\005\000\002\015\005\000\002\015\003\000\002\014" +
    "\002\000\002\014\005\000\002\021\004\000\002\013\006" +
    "\000\002\013\005\000\002\034\003\000\002\034\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\002\000\002\040" +
    "\007\000\002\040\007\000\002\040\003\000\002\027\007" +
    "\000\002\030\011\000\002\035\007\000\002\035\002\000" +
    "\002\036\004\000\002\036\002\000\002\041\004\000\002" +
    "\047\005\000\002\047\002\000\002\046\005\000\002\046" +
    "\003\000\002\046\002\000\002\037\006\000\002\043\004" +
    "\000\002\045\004\000\002\045\002\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\050\005\000\002\050" +
    "\005\000\002\050\004\000\002\051\005\000\002\051\002" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\004\000\002\054\005\000\002\054\002\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\004\000\002\056\003\000\002\056\005" +
    "\000\002\056\004\000\002\057\005\000\002\057\006\000" +
    "\002\057\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\032\005\001\002\000\004\002\266\001" +
    "\002\000\004\060\006\001\002\000\004\050\007\001\002" +
    "\000\016\033\010\034\ufffb\035\ufffb\036\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\016\034\ufff9\035\ufff9\036\ufff9\045\ufff9" +
    "\046\ufff9\060\ufff9\001\002\000\006\045\253\046\ufffe\001" +
    "\002\000\014\034\014\035\ufff7\036\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\012\035\131\036\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\014\035\ufff5\036\ufff5\045\ufff5\046\ufff5\060\ufff5" +
    "\001\002\000\014\035\ufff8\036\ufff8\045\ufff8\046\ufff8\060" +
    "\016\001\002\000\004\012\017\001\002\000\014\023\021" +
    "\024\023\030\025\031\022\060\030\001\002\000\010\046" +
    "\uffe1\050\uffe1\057\uffe1\001\002\000\010\046\uffde\050\uffde" +
    "\057\uffde\001\002\000\016\004\053\005\050\022\060\056" +
    "\061\060\057\061\051\001\002\000\010\046\uffdd\050\uffdd" +
    "\057\uffdd\001\002\000\014\023\021\024\023\030\025\031" +
    "\047\060\030\001\002\000\010\046\uffd8\050\uffd8\060\035" +
    "\001\002\000\010\046\uffdc\050\uffdc\057\uffdc\001\002\000" +
    "\004\050\032\001\002\000\010\046\uffdf\050\uffdf\057\uffdf" +
    "\001\002\000\010\046\uffe0\050\uffe0\057\uffe0\001\002\000" +
    "\014\035\ufff6\036\ufff6\045\ufff6\046\ufff6\060\ufff6\001\002" +
    "\000\006\046\uffd9\050\uffd9\001\002\000\006\051\043\052" +
    "\042\001\002\000\006\051\ufff0\052\ufff0\001\002\000\006" +
    "\046\040\050\037\001\002\000\010\046\uffd8\050\uffd8\060" +
    "\035\001\002\000\010\046\uffdb\050\uffdb\057\uffdb\001\002" +
    "\000\006\046\uffda\050\uffda\001\002\000\004\060\045\001" +
    "\002\000\014\023\021\024\023\030\025\031\022\060\030" +
    "\001\002\000\006\046\uffd7\050\uffd7\001\002\000\006\051" +
    "\uffef\052\uffef\001\002\000\010\046\uffd6\050\uffd6\057\uffd6" +
    "\001\002\000\016\004\053\005\050\022\060\056\061\060" +
    "\057\061\051\001\002\000\012\022\060\056\061\060\057" +
    "\061\051\001\002\000\060\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\040\uffa2\041\uffa2\042\uffa2\044" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\055\uffa2\057\uffa2" +
    "\001\002\000\050\004\uffae\005\uffae\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\040\uffae\041\uffae" +
    "\042\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae\055" +
    "\uffae\057\uffae\001\002\000\012\022\060\056\061\060\057" +
    "\061\051\001\002\000\004\047\113\001\002\000\042\012" +
    "\103\013\110\014\102\015\105\016\104\017\106\040\uffb9" +
    "\041\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\052" +
    "\uffb9\055\uffb9\057\uffb9\001\002\000\060\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8\052\uffa8\055" +
    "\uffa8\057\uffa8\001\002\000\064\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\044\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\057\uff9d\001\002\000\012\022\060\056\061" +
    "\060\057\061\051\001\002\000\016\004\053\005\050\022" +
    "\060\056\061\060\057\061\051\001\002\000\004\057\063" +
    "\001\002\000\060\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\040\uffa1\041\uffa1\042\uffa1\044\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\052\uffa1\055\uffa1\057\uffa1\001\002" +
    "\000\060\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\040\uffa0\041\uffa0\042\uffa0\044\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\052\uffa0\055\uffa0\057\uffa0\001\002\000\064" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\044\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\052\uffa3\053\066\054\067\055\uffa3\057\uffa3\001\002" +
    "\000\004\060\072\001\002\000\016\004\053\005\050\022" +
    "\060\056\061\060\057\061\051\001\002\000\004\055\071" +
    "\001\002\000\066\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\040\uff9e\041\uff9e\042\uff9e\044" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\057\uff9e\001\002\000\066\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\057\uff9f\001\002\000\060\004" +
    "\uffaa\005\uffaa\006\100\007\076\010\074\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\075\040" +
    "\uffaa\041\uffaa\042\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\052\uffaa\055\uffaa\057\uffaa\001\002\000\012\022\uffa5\056" +
    "\uffa5\060\uffa5\061\uffa5\001\002\000\012\022\uffa4\056\uffa4" +
    "\060\uffa4\061\uffa4\001\002\000\012\022\uffa6\056\uffa6\060" +
    "\uffa6\061\uffa6\001\002\000\012\022\060\056\061\060\057" +
    "\061\051\001\002\000\012\022\uffa7\056\uffa7\060\uffa7\061" +
    "\uffa7\001\002\000\060\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\052\uffa9\055\uffa9\057\uffa9\001" +
    "\002\000\016\004\uffb6\005\uffb6\022\uffb6\056\uffb6\060\uffb6" +
    "\061\uffb6\001\002\000\016\004\uffb8\005\uffb8\022\uffb8\056" +
    "\uffb8\060\uffb8\061\uffb8\001\002\000\016\004\uffb4\005\uffb4" +
    "\022\uffb4\056\uffb4\060\uffb4\061\uffb4\001\002\000\016\004" +
    "\uffb5\005\uffb5\022\uffb5\056\uffb5\060\uffb5\061\uffb5\001\002" +
    "\000\016\004\uffb3\005\uffb3\022\uffb3\056\uffb3\060\uffb3\061" +
    "\uffb3\001\002\000\026\040\uffbb\041\uffbb\042\uffbb\044\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\052\uffbb\055\uffbb\057\uffbb\001" +
    "\002\000\016\004\uffb7\005\uffb7\022\uffb7\056\uffb7\060\uffb7" +
    "\061\uffb7\001\002\000\016\004\053\005\050\022\060\056" +
    "\061\060\057\061\051\001\002\000\026\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\046\uffba\047\uffba\050\uffba\052\uffba\055" +
    "\uffba\057\uffba\001\002\000\014\023\uffd5\024\uffd5\030\uffd5" +
    "\031\uffd5\060\uffd5\001\002\000\050\004\uffae\005\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\040\uffae\041\uffae\042\uffae\044\uffae\046\uffae\047\uffae\050" +
    "\uffae\052\uffae\055\uffae\057\uffae\001\002\000\050\004\117" +
    "\005\120\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\121\040\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\052\uffb2\055\uffb2\057\uffb2\001\002\000" +
    "\012\022\060\056\061\060\057\061\051\001\002\000\012" +
    "\022\uffad\056\uffad\060\uffad\061\uffad\001\002\000\012\022" +
    "\uffac\056\uffac\060\uffac\061\uffac\001\002\000\012\022\uffab" +
    "\056\uffab\060\uffab\061\uffab\001\002\000\050\004\uffaf\005" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\052\uffaf\055\uffaf\057\uffaf\001\002\000\050" +
    "\004\117\005\120\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\121\040\uffb0\041\uffb0\042\uffb0\044\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\052\uffb0\055\uffb0\057\uffb0\001" +
    "\002\000\050\004\uffae\005\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\040\uffae\041\uffae\042" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae\055\uffae" +
    "\057\uffae\001\002\000\050\004\117\005\120\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\121\040\uffb1" +
    "\041\uffb1\042\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\052" +
    "\uffb1\055\uffb1\057\uffb1\001\002\000\004\047\127\001\002" +
    "\000\014\023\uffd4\024\uffd4\030\uffd4\031\uffd4\060\uffd4\001" +
    "\002\000\010\036\uffee\045\uffee\046\uffee\001\002\000\012" +
    "\036\ufff1\045\ufff1\046\ufff1\060\ufff1\001\002\000\012\036" +
    "\ufff4\045\ufff4\046\ufff4\060\035\001\002\000\006\051\134" +
    "\052\042\001\002\000\014\023\021\024\023\030\025\031" +
    "\022\060\030\001\002\000\004\050\136\001\002\000\012" +
    "\036\ufff2\045\ufff2\046\ufff2\060\ufff2\001\002\000\010\036" +
    "\140\045\ufffd\046\ufffd\001\002\000\004\060\233\001\002" +
    "\000\004\050\142\001\002\000\016\033\010\034\ufffb\035" +
    "\ufffb\036\ufffb\045\ufffb\046\ufffb\001\002\000\006\045\147" +
    "\046\uffe9\001\002\000\004\050\145\001\002\000\010\036" +
    "\uffed\045\uffed\046\uffed\001\002\000\004\046\231\001\002" +
    "\000\022\025\150\026\157\027\154\037\155\043\151\046" +
    "\uffcc\050\uffcc\060\161\001\002\000\004\056\225\001\002" +
    "\000\016\004\053\005\050\022\060\056\061\060\057\061" +
    "\051\001\002\000\012\041\uffd1\042\uffd1\046\uffd1\050\uffd1" +
    "\001\002\000\012\041\uffcd\042\uffcd\046\uffcd\050\uffcd\001" +
    "\002\000\012\041\uffc9\042\uffc9\046\uffc9\050\uffc9\001\002" +
    "\000\016\004\053\005\050\022\060\056\061\060\057\061" +
    "\051\001\002\000\012\041\uffd3\042\uffd3\046\uffd3\050\uffd3" +
    "\001\002\000\004\056\201\001\002\000\012\041\uffd0\042" +
    "\uffd0\046\uffd0\050\uffd0\001\002\000\022\011\uff9d\041\uffc0" +
    "\042\uffc0\046\uffc0\050\uffc0\053\uff9d\054\uff9d\056\171\001" +
    "\002\000\012\041\uffce\042\uffce\046\uffce\050\uffce\001\002" +
    "\000\012\041\uffcf\042\uffcf\046\uffcf\050\uffcf\001\002\000" +
    "\006\046\uffea\050\165\001\002\000\026\025\150\026\157" +
    "\027\154\037\155\041\uffcc\042\uffcc\043\151\046\uffcc\050" +
    "\uffcc\060\161\001\002\000\012\041\uffd2\042\uffd2\046\uffd2" +
    "\050\uffd2\001\002\000\010\011\177\053\066\054\067\001" +
    "\002\000\012\041\uffc2\042\uffc2\046\uffc2\050\uffc2\001\002" +
    "\000\022\004\053\005\050\022\060\052\uffbd\056\061\057" +
    "\uffbd\060\057\061\051\001\002\000\006\052\174\057\175" +
    "\001\002\000\006\052\uffbe\057\uffbe\001\002\000\016\004" +
    "\053\005\050\022\060\056\061\060\057\061\051\001\002" +
    "\000\012\041\uffc1\042\uffc1\046\uffc1\050\uffc1\001\002\000" +
    "\006\052\uffbf\057\uffbf\001\002\000\016\004\053\005\050" +
    "\022\060\056\061\060\057\061\051\001\002\000\012\041" +
    "\uffbc\042\uffbc\046\uffbc\050\uffbc\001\002\000\004\060\202" +
    "\001\002\000\010\053\uff9d\054\uff9d\057\uff9d\001\002\000" +
    "\010\053\066\054\067\057\204\001\002\000\012\041\uffca" +
    "\042\uffca\046\uffca\050\uffca\001\002\000\004\040\206\001" +
    "\002\000\026\025\150\026\157\027\154\037\155\041\uffcc" +
    "\042\uffcc\043\151\046\uffcc\050\uffcc\060\161\001\002\000" +
    "\012\041\uffc5\042\uffc5\046\uffc5\050\165\001\002\000\010" +
    "\041\212\042\211\046\uffc3\001\002\000\022\025\150\026" +
    "\157\027\154\037\155\043\151\046\uffcc\050\uffcc\060\161" +
    "\001\002\000\016\004\053\005\050\022\060\056\061\060" +
    "\057\061\051\001\002\000\004\046\214\001\002\000\012" +
    "\041\uffc7\042\uffc7\046\uffc7\050\uffc7\001\002\000\004\040" +
    "\216\001\002\000\026\025\150\026\157\027\154\037\155" +
    "\041\uffcc\042\uffcc\043\151\046\uffcc\050\uffcc\060\161\001" +
    "\002\000\012\041\uffc6\042\uffc6\046\uffc6\050\165\001\002" +
    "\000\006\046\uffc4\050\165\001\002\000\004\044\222\001" +
    "\002\000\022\025\150\026\157\027\154\037\155\043\151" +
    "\046\uffcc\050\uffcc\060\161\001\002\000\006\046\224\050" +
    "\165\001\002\000\012\041\uffc8\042\uffc8\046\uffc8\050\uffc8" +
    "\001\002\000\004\060\226\001\002\000\010\053\uff9d\054" +
    "\uff9d\057\uff9d\001\002\000\010\053\066\054\067\057\230" +
    "\001\002\000\012\041\uffcb\042\uffcb\046\uffcb\050\uffcb\001" +
    "\002\000\004\060\232\001\002\000\004\050\uffeb\001\002" +
    "\000\006\050\uffe8\056\235\001\002\000\004\050\uffec\001" +
    "\002\000\010\035\236\057\237\060\uffe2\001\002\000\004" +
    "\060\uffe3\001\002\000\004\050\uffe7\001\002\000\006\050" +
    "\246\057\245\001\002\000\004\060\035\001\002\000\006" +
    "\051\243\052\042\001\002\000\014\023\021\024\023\030" +
    "\025\031\022\060\030\001\002\000\006\050\uffe4\057\uffe4" +
    "\001\002\000\004\050\uffe6\001\002\000\006\035\236\060" +
    "\uffe2\001\002\000\004\060\035\001\002\000\006\051\251" +
    "\052\042\001\002\000\014\023\021\024\023\030\025\031" +
    "\022\060\030\001\002\000\006\050\uffe5\057\uffe5\001\002" +
    "\000\022\025\150\026\157\027\154\037\155\043\151\046" +
    "\uffcc\050\uffcc\060\161\001\002\000\004\046\255\001\002" +
    "\000\004\060\256\001\002\000\004\053\257\001\002\000" +
    "\004\002\001\001\002\000\006\046\uffff\050\165\001\002" +
    "\000\016\034\ufffc\035\ufffc\036\ufffc\045\ufffc\046\ufffc\060" +
    "\262\001\002\000\004\012\263\001\002\000\016\004\053" +
    "\005\050\022\060\056\061\060\057\061\051\001\002\000" +
    "\004\050\265\001\002\000\016\034\ufffa\035\ufffa\036\ufffa" +
    "\045\ufffa\046\ufffa\060\ufffa\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\010\005\011" +
    "\001\001\000\004\010\260\001\001\000\004\031\253\001" +
    "\001\000\004\006\012\001\001\000\004\007\127\001\001" +
    "\000\004\011\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\023\017\026\021\030\022\025\023\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\043" +
    "\125\050\054\053\051\056\055\001\001\000\002\001\001" +
    "\000\006\022\025\023\045\001\001\000\010\014\032\015" +
    "\035\020\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\040\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\023" +
    "\017\043\021\030\022\025\023\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\043\053" +
    "\050\054\053\051\056\055\001\001\000\006\053\123\056" +
    "\055\001\001\000\002\001\001\000\004\051\122\001\001" +
    "\000\006\053\113\056\055\001\001\000\002\001\001\000" +
    "\006\044\110\045\106\001\001\000\004\054\072\001\001" +
    "\000\004\057\064\001\001\000\004\056\063\001\001\000" +
    "\012\043\061\050\054\053\051\056\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\067\050\054\053\051" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\100\056" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\111\053\051\056\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\114\001\001\000\004" +
    "\052\115\001\001\000\006\053\121\056\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\115\001\001\000\004\051\124\001" +
    "\001\000\004\052\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\136\001\001\000\004\012\131\001" +
    "\001\000\004\020\132\001\001\000\002\001\001\000\014" +
    "\013\023\017\134\021\030\022\025\023\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\142\005" +
    "\011\033\143\001\001\000\004\032\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\155\027\161\030\162\034\163\037\151\040\152\041\157" +
    "\001\001\000\002\001\001\000\012\043\220\050\054\053" +
    "\051\056\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\043\204\050\054\053\051\056" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\167\057\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\026\165" +
    "\027\161\030\162\037\151\040\152\041\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\043\172\046\171\050\054\053\051\056\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\043\175\050\054" +
    "\053\051\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\043\177\050\054\053\051\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\026\155\027\161\030\162\034\206\037\151\040" +
    "\152\041\157\001\001\000\004\035\207\001\001\000\004" +
    "\036\212\001\001\000\020\026\155\027\161\030\162\034" +
    "\217\037\151\040\152\041\157\001\001\000\012\043\214" +
    "\050\054\053\051\056\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\155\027\161" +
    "\030\162\034\216\037\151\040\152\041\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\155\027\161\030\162\034\222\037\151\040\152\041" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\233\001\001\000\002\001\001\000\006\016\240\025" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\241\001\001\000\002\001\001\000" +
    "\014\013\023\017\243\021\030\022\025\023\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\246\001" +
    "\001\000\004\020\247\001\001\000\002\001\001\000\014" +
    "\013\023\017\251\021\030\022\025\023\017\001\001\000" +
    "\002\001\001\000\020\026\155\027\161\030\162\034\257" +
    "\037\151\040\152\041\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\043" +
    "\263\050\054\053\051\056\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	module=new Module("temp");

    }


    private Module module;
	public void show(){
		module.show();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module_block ::= MODULE IDENTIFIER SEMI declarations module_begin END IDENTIFIER PERIOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module_block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module_begin ::= BEGIN statement_sequence 
            {
              StatementSequence RESULT =null;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementSequence sq = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_begin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module_begin ::= 
            {
              StatementSequence RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_begin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_list ::= const_list IDENTIFIER EQ expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_list ::= type_list IDENTIFIER EQ type_id SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_list ::= var_list identifier_list COLON type_id SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementSequence v = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 module.add(id).add(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_body ::= declarations procedure_begin END IDENTIFIER 
            {
              StatementSequence RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementSequence v = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_begin ::= BEGIN statement_sequence 
            {
              StatementSequence RESULT =null;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementSequence sq = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_begin ::= 
            {
              StatementSequence RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= 
            {
              Object RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameters ::= LPAREN fp_section RPAREN 
            {
              Object RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fp_section ::= fp_section SEMI var_if identifier_list COLON type_id 
            {
              Object RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fp_section ::= var_if identifier_list COLON type_id 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_if ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_id ::= type_but_array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_id ::= array_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_but_array ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_but_array ::= INTEGER 
            {
              Object RESULT =null;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_but_array ::= BOOLEAN 
            {
              Object RESULT =null;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_but_array ::= record_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= field_one 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_one ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_one ::= identifier_list COLON type_id 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_type ::= array_part type_but_array 
            {
              Object RESULT =null;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_part ::= array_part ARRAY expression OF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_part ::= ARRAY expression OF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_sequence ::= statement 
            {
              StatementSequence RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractStatement v = (AbstractStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 StatementSequence sq = new StatementSequence();sq.add(v);RESULT=sq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_sequence ::= statement_sequence SEMI statement 
            {
              StatementSequence RESULT =null;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementSequence sq = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractStatement v = (AbstractStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sq.add(v);RESULT=sq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= assignment 
            {
              AbstractStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimitiveStatement v = (PrimitiveStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= procedure_call 
            {
              AbstractStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimitiveStatement v = (PrimitiveStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= if_statement 
            {
              AbstractStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement v = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= while_statement 
            {
              AbstractStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement v = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= rw_statement 
            {
              AbstractStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimitiveStatement v = (PrimitiveStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= 
            {
              AbstractStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rw_statement ::= READ LPAREN IDENTIFIER selector RPAREN 
            {
              PrimitiveStatement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new PrimitiveStatement(v1+v2+v3+v4+v5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rw_statement ::= WRITE LPAREN IDENTIFIER selector RPAREN 
            {
              PrimitiveStatement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new PrimitiveStatement(v1+v2+v3+v4+v5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rw_statement ::= WRITELN 
            {
              PrimitiveStatement RESULT =null;
		 RESULT=new PrimitiveStatement("WRITELN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              WhileStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementSequence sq = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 WhileStatement ws=new WhileStatement(e);ws.getLoopBody().add(sq);RESULT=ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementSequence v1 = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementSequence v3 = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 IfStatement is = new IfStatement(e);is.getTrueBody().add(v1);if(v3!=null)is.getFalseBody().add(v3);RESULT=is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              StatementSequence RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elsif_statement ::= 
            {
              StatementSequence RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_statement ::= ELSE statement_sequence 
            {
              StatementSequence RESULT =null;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementSequence sq = (StatementSequence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_statement ::= 
            {
              StatementSequence RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              PrimitiveStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new PrimitiveStatement(id+ap); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // actual_parameters ::= LPAREN ap_list RPAREN 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="("+ap+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actual_parameters ::= 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ap_list ::= ap_list COMMA expression 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ap +","+ e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ap_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ap_list ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              PrimitiveStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new PrimitiveStatement(id+s+v+e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= simple_expression expression_if 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_if ::= expression_op simple_expression 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_if",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_if ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_if",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_op ::= EQ 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_op ::= NEQ 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_op ::= LT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=" &lt "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_op ::= LE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=" &lt= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_op ::= GT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=" gt "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_op ::= GE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=" &gt= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_expression ::= PLUS term simple_expression_if 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2+v3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_expression ::= MINUS term simple_expression_if 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2+v3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expression ::= term simple_expression_if 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_expression_if ::= simple_expression_if simple_expression_if_op term 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2+v3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_if",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expression_if ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_if",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_expression_if_op ::= PLUS 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_if_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_expression_if_op ::= MINUS 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_if_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_expression_if_op ::= OR 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_if_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= factor term_if 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term_if ::= term_if term_if_op term 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2+v3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term_if ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term_if_op ::= TIMES 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term_if_op ::= DIVIDE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term_if_op ::= MOD 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term_if_op ::= AND 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_if_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v1+v2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= NUMBER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="("+v+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= NOT factor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="~"+v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // selector ::= selector PERIOD IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s+"."+id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // selector ::= selector LBRACKET expression RBRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=s+"["+e+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // selector ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
